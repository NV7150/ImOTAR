Shader "ImOTAR/FullscreenDepthWriter"
{
    SubShader
    {
        Tags { "RenderPipeline"="UniversalPipeline" }
        Pass
        {
            Cull Off
            Blend One Zero
            ZTest Always
            ZWrite On
            ColorMask 0

            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            TEXTURE2D(_DepthTex);
            SAMPLER(sampler_DepthTex);

            // ★ ARFoundation が設定する表示行列（display matrix）
            float4x4 _UnityDisplayTransform;  // ARFoundation docs: display matrix をUVに掛ける

            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv         : TEXCOORD0; // 元の0..1 UV（参考用に残す）
                // float2 uvDisp     : TEXCOORD1; // displayMatrix 適用後のUV
            };

            inline float ToNonLinerDepth(float depth)
            {
                float near = _ProjectionParams.y;
                float far  = _ProjectionParams.z;
                float linearDepth = (depth - near) / (far - near);
                linearDepth = saturate(linearDepth);
                float depthNl = (1.0 - linearDepth * _ZBufferParams.y) / (linearDepth * _ZBufferParams.x);
                return depthNl;
            }

            Varyings vert(uint vertexID : SV_VertexID)
            {
                Varyings o;

                // 0..2 の扇形フルスクリーンクアッド
                o.uv = float2((vertexID << 1) & 2, vertexID & 2);

                #if UNITY_REVERSED_Z
                o.positionCS = float4(o.uv * 2.0 - 1.0, 1.0, 1.0);
                #else
                o.positionCS = float4(o.uv * 2.0 - 1.0, 0.0, 1.0);
                #endif

                #if UNITY_UV_STARTS_AT_TOP
                o.positionCS.y = -o.positionCS.y;
                #endif
                // ★ displayMatrix をUVに適用（公式例と同形）
                //   outputUV = (uv,1) * _UnityDisplayTransform の xy
                // o.uvDisp = mul(float3(o.uv, 1.0f), _UnityDisplayTransform).xy;

                return o;
            }

            float frag(Varyings i) : SV_Depth
            {
                // ★ サンプルは displayMatrix 適用後UVで行う
                float rawDepth = SAMPLE_TEXTURE2D(_DepthTex, sampler_DepthTex, i.uvDisp).r;
                if (rawDepth < 0) discard;

                float nlDepth = ToNonLinerDepth(rawDepth);
                return nlDepth;
            }
            ENDHLSL
        }
    }
}
